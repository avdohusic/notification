using System;
using System.Linq;
using System.Net;
using System.Net.Mail;
using System.Threading.Tasks;
using Database;
using Mailjet.Client;
using Mailjet.Client.Resources;
using Microsoft.Extensions.Logging;
using Microsoft.Extensions.Options;
using Models;
using Models.Settings;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using Notification.Interfaces;
using SendGrid;
using SendGrid.Helpers.Mail;

namespace Notification.Services
{
    public class EmailService : IEmailService
    {
        private readonly ILogger<EmailService> _logger;
        private readonly NotificationDbContext _notificationDbContext;
        private readonly IOptions<NotificationSettings> _settings;

        public EmailService(
            NotificationDbContext notificationDbContext,
            IOptions<NotificationSettings> settings,
            ILogger<EmailService> logger)
        {
            _notificationDbContext = notificationDbContext;
            _settings = settings;
            _logger = logger;
        }

        public async Task ProceedNotificationAsync(NotificationQueue notificationQueue)
        {
            try
            {
                if (notificationQueue.FirstAttemptedTimestamp == null)
                    notificationQueue.FirstAttemptedTimestamp = DateTime.Now;

                notificationQueue.LastAttemptedTimestamp = DateTime.Now;

                UpdateNotificationQueue(notificationQueue);

                var responseNotificationQueue = await SendEmail(notificationQueue);

                UpdateNotificationQueue(responseNotificationQueue);
            }
            catch (Exception e)
            {
                _logger.LogError(e.Message);
                throw;
            }
        }

        public NotificationQueue GetNotificationQueue()
        {
            try
            {
                var repeat = _settings.Value.Repeat;
                var waitSeconds = _settings.Value.WaitSeconds;
                var waitTime = DateTime.Now.AddSeconds(waitSeconds);

                var notificationQueue = _notificationDbContext.NotificationQueues
                    .Where(x =>
                        (x.FirstAttemptedTimestamp == null || x.LastAttemptedTimestamp < waitTime &&
                            x.SentTimestamp == null && x.ExpiredTimestamp == null) &&
                        x.SentTimestamp == null &&
                        x.FailCount < repeat &&
                        (x.ExpiredTimestamp > DateTime.Now || x.ExpiredTimestamp == null))
                    .OrderByDescending(x => x.Priority)
                    .FirstOrDefault();

                return notificationQueue;
            }
            catch (Exception e)
            {
                _logger.LogError(e.Message);
                throw;
            }
        }

        public async Task<NotificationQueue> SendEmail(NotificationQueue notificationQueue)
        {
            switch (_settings.Value.Client)
            {
                case "mailjet":
                    return await SendMailJetEmail(notificationQueue);
                case "sendgrid":
                    return await SendgridEmail(notificationQueue);
                case "local":
                default:
                    return SendLocalEmail(notificationQueue);
            }
        }

        private async Task<NotificationQueue> SendMailJetEmail(NotificationQueue notificationQueue)
        {
            var client = new MailjetClient(_settings.Value.MailJetSettings.PublicKey,
                _settings.Value.MailJetSettings.PrivateKey);
            MailjetRequest request = new MailjetRequest
            {
                Resource = Send.Resource
            }.Property(Send.Messages, new JArray {
                new JObject {
                    {"From", new JObject {
                        {"Email", notificationQueue.From},
                        {"Name", notificationQueue.FromName}
                    }},
                    {"To", new JArray {
                        new JObject {
                            {"Email", notificationQueue.To},
                            {"Name", notificationQueue.ToName}
                        }
                    }},
                    {"Subject", notificationQueue.Subject},
                    {"TextPart", "Dear passenger 1, welcome to Mailjet! May the delivery force be with you!"},
                    {"HTMLPart", "<h3>Dear passenger 1, welcome to <a href=\"https://www.mailjet.com/\">Mailjet</a>!</h3><br />May the delivery force be with you!"}
                }
            });

            MailjetResponse response = await client.PostAsync(request);

            if (response.IsSuccessStatusCode)
            {
                Console.WriteLine(string.Format("Total: {0}, Count: {1}\n", response.GetTotal(), response.GetCount()));
                Console.WriteLine(response.GetData());
            }
            else
            {
                Console.WriteLine(string.Format("StatusCode: {0}\n", response.StatusCode));
                Console.WriteLine(string.Format("ErrorInfo: {0}\n", response.GetErrorInfo()));
                Console.WriteLine(string.Format("ErrorMessage: {0}\n", response.GetErrorMessage()));
            }

            return notificationQueue;
        }

        public async Task<NotificationQueue> SendgridEmail(NotificationQueue notificationQueue)
        {
            try
            {
                var sendGridClient = new SendGridClient(_settings.Value.SendgridApiKey);
                var sendGridMessage = CreateSendGridMessage(notificationQueue);

                var sendGridResponse = await sendGridClient.SendEmailAsync(sendGridMessage);

                if (sendGridResponse.StatusCode == HttpStatusCode.Accepted)
                    notificationQueue.SentTimestamp = DateTime.Now;
                else
                    notificationQueue.FailCount++;

            }
            catch (Exception e)
            {
                _logger.LogError(e.Message);
                notificationQueue.FailCount++;
            }
            return notificationQueue;
        }

        private NotificationQueue SendLocalEmail(NotificationQueue notificationQueue)
        {
            try
            {
                var from = new MailAddress(notificationQueue.From, notificationQueue.FromName);
                var to = new MailAddress(notificationQueue.To, notificationQueue.ToName);

                var message = new MailMessage(from, to)
                {
                    Subject = notificationQueue.Subject,
                    IsBodyHtml = true,
                    Body = notificationQueue.Body,
                };

                if (!string.IsNullOrEmpty(notificationQueue.Attachment))
                {
                    var attachment = JsonConvert.DeserializeObject<AttachmentQueue>(notificationQueue.Attachment);
                    message.Attachments.Add(new System.Net.Mail.Attachment(attachment.Content));

                }

                SmtpClient client = new SmtpClient(_settings.Value.SmtpSettings.SmtpServerAddress,
                    _settings.Value.SmtpSettings.SmtpServerPort);

                client.UseDefaultCredentials = false;
                client.Credentials = new NetworkCredential(_settings.Value.SmtpSettings.SmtpUsername,
                    _settings.Value.SmtpSettings.SmtpPassword);

                client.EnableSsl = true;

                client.Send(message);
                notificationQueue.SentTimestamp = DateTime.Now;

            }
            catch (Exception e)
            {
                Console.WriteLine(e);
                notificationQueue.SentTimestamp = null;
                notificationQueue.FailCount++;
            }
            return notificationQueue;
        }

        public void UpdateNotificationQueue(NotificationQueue notificationQueue)
        {
            try
            {
                _notificationDbContext.NotificationQueues.Update(notificationQueue);
                _notificationDbContext.SaveChanges();
            }
            catch (Exception e)
            {
                _logger.LogError(e.Message);
                throw;
            }
        }

        private static SendGridMessage CreateSendGridMessage(NotificationQueue notificationQueue)
        {
            var msg = new SendGridMessage();
            msg.SetFrom(new EmailAddress(notificationQueue.From, notificationQueue.FromName));
            msg.AddTo(new EmailAddress(notificationQueue.To, notificationQueue.ToName));
            msg.SetSubject(notificationQueue.Subject);
            msg.AddContent(MimeType.Html, notificationQueue.Body);
            msg.SetReplyTo(new EmailAddress(notificationQueue.ReplyTo, notificationQueue.ReplyToName));

            //// Add logo as attachment
            //msg.AddAttachment(
            //        "logo.jpg",
            //        "",
            //        "image/jpg",
            //        "inline",
            //        "logo");

            //// Add other attachment if they exist
            if (!string.IsNullOrEmpty(notificationQueue.Attachment))
            {
                var attachment = JsonConvert.DeserializeObject<AttachmentQueue>(notificationQueue.Attachment);
                msg.AddAttachment(attachment.FileName, attachment.Content, attachment.Type, attachment.Disposition, attachment.ContentId);
            }
            return msg;
        }
    }
}